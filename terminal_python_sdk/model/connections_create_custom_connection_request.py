# coding: utf-8

"""
    Terminal API

    Terminal is a unified API that makes it easy to integrate with the leading telematics service providers.  Contact Support:  Name: Terminal  Email: connect@withterminal.com

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from terminal_python_sdk import schemas  # noqa: F401


class ConnectionsCreateCustomConnectionRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def tags() -> typing.Type['ConnectionsCreateCustomConnectionRequestTags']:
                return ConnectionsCreateCustomConnectionRequestTags
        
            @staticmethod
            def backfill() -> typing.Type['ConnectionsCreateCustomConnectionRequestBackfill']:
                return ConnectionsCreateCustomConnectionRequestBackfill
        
            @staticmethod
            def company() -> typing.Type['ConnectionsCreateCustomConnectionRequestCompany']:
                return ConnectionsCreateCustomConnectionRequestCompany
        
            @staticmethod
            def credentials() -> typing.Type['ConnectionsCreateCustomConnectionRequestCredentials']:
                return ConnectionsCreateCustomConnectionRequestCredentials
            externalId = schemas.StrSchema
            provider = schemas.StrSchema
            syncMode = schemas.StrSchema
            __annotations__ = {
                "tags": tags,
                "backfill": backfill,
                "company": company,
                "credentials": credentials,
                "externalId": externalId,
                "provider": provider,
                "syncMode": syncMode,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> 'ConnectionsCreateCustomConnectionRequestTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backfill"]) -> 'ConnectionsCreateCustomConnectionRequestBackfill': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["company"]) -> 'ConnectionsCreateCustomConnectionRequestCompany': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credentials"]) -> 'ConnectionsCreateCustomConnectionRequestCredentials': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalId"]) -> MetaOapg.properties.externalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider"]) -> MetaOapg.properties.provider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["syncMode"]) -> MetaOapg.properties.syncMode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "backfill", "company", "credentials", "externalId", "provider", "syncMode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> typing.Union['ConnectionsCreateCustomConnectionRequestTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backfill"]) -> typing.Union['ConnectionsCreateCustomConnectionRequestBackfill', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["company"]) -> typing.Union['ConnectionsCreateCustomConnectionRequestCompany', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credentials"]) -> typing.Union['ConnectionsCreateCustomConnectionRequestCredentials', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalId"]) -> typing.Union[MetaOapg.properties.externalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> typing.Union[MetaOapg.properties.provider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["syncMode"]) -> typing.Union[MetaOapg.properties.syncMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "backfill", "company", "credentials", "externalId", "provider", "syncMode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        tags: typing.Union['ConnectionsCreateCustomConnectionRequestTags', schemas.Unset] = schemas.unset,
        backfill: typing.Union['ConnectionsCreateCustomConnectionRequestBackfill', schemas.Unset] = schemas.unset,
        company: typing.Union['ConnectionsCreateCustomConnectionRequestCompany', schemas.Unset] = schemas.unset,
        credentials: typing.Union['ConnectionsCreateCustomConnectionRequestCredentials', schemas.Unset] = schemas.unset,
        externalId: typing.Union[MetaOapg.properties.externalId, str, schemas.Unset] = schemas.unset,
        provider: typing.Union[MetaOapg.properties.provider, str, schemas.Unset] = schemas.unset,
        syncMode: typing.Union[MetaOapg.properties.syncMode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConnectionsCreateCustomConnectionRequest':
        return super().__new__(
            cls,
            *args,
            tags=tags,
            backfill=backfill,
            company=company,
            credentials=credentials,
            externalId=externalId,
            provider=provider,
            syncMode=syncMode,
            _configuration=_configuration,
            **kwargs,
        )

from terminal_python_sdk.model.connections_create_custom_connection_request_backfill import ConnectionsCreateCustomConnectionRequestBackfill
from terminal_python_sdk.model.connections_create_custom_connection_request_company import ConnectionsCreateCustomConnectionRequestCompany
from terminal_python_sdk.model.connections_create_custom_connection_request_credentials import ConnectionsCreateCustomConnectionRequestCredentials
from terminal_python_sdk.model.connections_create_custom_connection_request_tags import ConnectionsCreateCustomConnectionRequestTags
